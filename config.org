#+TITLE: My Emacs Config
#+AUTHOR: Andrew Jarrett
#+EMAIL: ahrjarrett@gmail.com

* Init
** Frame Defaults
#+BEGIN_SRC emacs-lisp
  ;; Set frame size on startup:
  (add-to-list 'default-frame-alist '(height . 56))
  (add-to-list 'default-frame-alist '(width . 177))
#+END_SRC

** More Better Defaults
Garbage collect at 20MG instead of 0.76MB to speed up some operations:
#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 20000000)
#+END_SRC

** Interface Customization
#+BEGIN_SRC emacs-lisp
  ;; set font
  (add-to-list 'default-frame-alist '(font . "mononoki 14"))
  (set-face-attribute 'default t :font "mononoki 14")
  (set-frame-font "mononoki 14" nil t)
  (set-face-attribute 'default nil :height 140)

  ;; get rid of Emacs GUI shit
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package nord-theme
    :ensure t
    :defer t
    :init (load-theme 'nord t))

  (use-package zenburn-theme
    :ensure t
    :defer t)

  (use-package leuven-theme
    :ensure t
    :defer t)

  (use-package sublime-themes
    :ensure t
    :defer t)
#+END_SRC

** PATH

Consider moving this into [[file:init.el][init.el]]?

#+BEGIN_SRC emacs-lisp
  (setenv "PATH" (concat "/usr/local/smlnj/bin:" (getenv "PATH")))
  (setq exec-path (cons "/usr/local/smlnj/bin"  exec-path))

  ;; Snippet to load a directory, making al .el files available to require
  (defun load-directory (dir)
    (let ((load-it (lambda (f)
                    (load-file (concat (file-name-as-directory dir) f)))))
     
        (mapc load-it (directory-files dir nil "\\.el$"))))

  ;; add =vendor= to default directory
  (load-directory "~/.emacs.d/vendor/")

#+END_SRC

** Personal Variables
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Andrew Jarrett"
        user-email-address "ahrjarrett@gmail.com")
  ;; where to put emacs backup files
  (setq backup-directory-alist `(("." . "~/.saves")))
#+END_SRC

** Global Keybindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-s") 'swiper)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "<C-M-up>") 'enlarge-window-horizontally)
  (global-set-key (kbd "<C-M-down>") 'shrink-window-horizontally)
#+END_SRC

** Filesystem Navigation
*** Dired
#+BEGIN_SRC emacs-lisp
  ;; allow me to open a file/dir in dired w/o creating another buffer by hitting `a`
  (put 'dired-find-alternate-file 'disabled nil)
#+END_SRC

* Language & Environment Support
** LISPs
*** Emacs Lisp
#+BEGIN_SRC emacs-lisp
  ;; display “lambda” as “λ”
  (global-prettify-symbols-mode 1)
#+END_SRC
**** Scratch
The [[https://github.com/narendraj9/quoted-scratch][quoted scratch]] package isn't on elpa/melpa, so you've gotta download and load it manually.
#+BEGIN_SRC emacs-lisp
  (use-package quoted-scratch
    :load-path "~/.emacs.d/quoted-scratch/"
    :demand t
    :config
    (progn
      (setq initial-scratch-message nil
            qs-show-auroville-quality nil)
      (add-hook 'emacs-startup-hook
                (lambda ()
                  (run-with-timer 1 nil 'qs-refresh-scratch-buffer)
                  (qs-refresh-quote-when-idle)))))
#+END_SRC

**** Macrostep
[[https://github.com/joddie/macrostep][Macrostep on Github]]
#+BEGIN_SRC emacs-lisp
  (use-package macrostep
    :ensure t
    :bind ("C-c e m" . macrostep-expand)
          ("C-c e c" . macrostep-collapse))
#+END_SRC
*** Parinfer
[[https://github.com/DogLooksGood/parinfer-mode][parinfer-mode on Github]]

Right now these are just the default settings, minus disabling lispy and paredit support.
#+BEGIN_SRC emacs-lisp
  (use-package parinfer
    :ensure t
    :bind
    (("C-," . parinfer-toggle-mode))
    :init
    (progn
      (setq parinfer-extensions
            '(defaults       ; should be included.
              pretty-parens  ; different paren styles for different modes.
              evil           ; If you use Evil.
              ;; lispy          ; If you use Lispy. With this extension, you should install Lispy and do not enable lispy-mode directly.
              ;; paredit        ; Introduce some paredit commands.
              smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
              smart-yank))   ; Yank behavior depend on mode.
      (add-hook 'clojure-mode-hook #'parinfer-mode)
      (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
      (add-hook 'common-lisp-mode-hook #'parinfer-mode)
      (add-hook 'scheme-mode-hook #'parinfer-mode)
      (add-hook 'lisp-mode-hook #'parinfer-mode)))
#+END_SRC
*** Clojure
[[https://github.com/clojure-emacs/clojure-mode][Clojure-Mode on Github]]
#+BEGIN_SRC emacs-lisp
(use-package clojure-mode
  :ensure t
  :config)
#+END_SRC

**** CIDER
#+BEGIN_SRC emacs-lisp
  (use-package cider
    :ensure t)
#+END_SRC

** ML
[[https://elpa.gnu.org/packages/sml-mode.html][SML Mode on ELPA]]
#+BEGIN_SRC emacs-lisp
  (use-package sml-mode
    :ensure t
    :mode (("\\.sml\\'" . sml-mode)))
#+END_SRC

Reason Mode on GitHub
#+BEGIN_SRC emacs-lisp
  (use-package reason-mode
    :ensure t
    :mode ("\\.rei?'" . reason-mode))
#+END_SRC


** Web
*** JS2 Mode
[[https://elpa.gnu.org/packages/js2-mode.html][js2-mode on ELPA]]
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :mode (("\\.js$" . js2-mode)) ;; makes sure we don't use for jsx files, too
    :interpreter ("node" . js2-mode)
    :config
    (setq-default js2-strict-missing-semi-warning nil)
    (add-hook 'js2-mode-hook (lambda () (setq js2-basic-offset 2))))
#+END_SRC
*** React/JSX

[[https://github.com/felipeochoa/rjsx-mode][rjsx-mode on GitHub]]

#+BEGIN_SRC emacs-lisp
  (use-package rjsx-mode
    :ensure t)
#+END_SRC

*** Web Mode
[[http://web-mode.org/][web-mode docs]]

TODO really dig into react, make sure you can use arrow fn in component attribute.

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :mode (("\\.html\\'" . web-mode ))
    :mode (("\\.css\\'" . web-mode ))
    :init
    (progn
      (setq web-mode-markup-indent-offset 2)
      (setq web-mode-code-indent-offset 2)
      (setq web-mode-css-indent-offset 2)

      (setq web-mode-enable-auto-pairing t)
      (setq web-mode-enable-css-colorization t)))

#+END_SRC

#+RESULTS:

*** LESS
#+BEGIN_SRC emacs-lisp
  (use-package less-css-mode
    :ensure t
    ;:commands less-css-mode
    ;:config
    ;(use-package js2-mode)
    ;(use-package skewer-less)
    )

#+END_SRC
*** Prettier JS
DONE Once you get web-mode working, uncomment the line that adds a hook for prettier.

#+BEGIN_SRC emacs-lisp
;;(use-package prettier-js
;;  :ensure t
;;  :init
;;  (add-hook 'js2-mode-hook 'prettier-js-mode)
;;  (add-hook 'web-mode-hook 'prettier-js-mode)
;;  (setq prettier-js-args
;;        '("--trailing-comma" "all"
;;          "--single-quote" "true")))
#+END_SRC

* Org-Mode
** Basic Org Config

The latest version of org-mode is manually installed in this directory under [[file:org-mode/][org-mode/]]. This is to provide more extensive language support for org-babel.

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "  ⋱ ")
  (setq org-startup-indented t)

  (use-package htmlize
    :ensure t)

  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook #'org-bullets-mode))

  ;; Custom variables
  (custom-set-variables
   '(org-directory "~/Dropbox/orgfiles")
   '(org-default-notes-file (concat org-directory "/notes.org")))

  (setq org-agenda-files (list (concat org-directory "/google-calendar.org")
                               (concat org-directory "/index.org")))
#+END_SRC

** Org-Babel

*** SML

[[https://github.com/swannodette/ob-sml][ob-sml on GitHub]]

#+BEGIN_QUOTE
Start a sml REPL with =M-x run-sml=. You should now be able to place your cursor in the code block and evaluate with =C-c C-c= and the contents of your code block will evaluate inline.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (require 'ob-sml nil 'noerror)
#+END_SRC

*** Kick it all off

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((sml . t)))
#+END_SRC

** Org Autocomplete
#+BEGIN_SRC emacs-lisp
  (use-package org-ac
    :ensure t
    ;; why is this require in init necessary? is it?
    :init (progn
           (require 'org-ac)
           (org-ac/config-default)))
#+END_SRC

** Org Capture
#+BEGIN_SRC emacs-lisp
  ;; Go into Insert state after org-capture 
  (add-hook 'org-capture-mode-hook 'evil-insert-state)

  ;; NOTE: %i allows you to mark a block of text anywhere in Emacs,
  ;; run Org-Capture, and it will drop that text into the capture.
  (setq org-capture-templates
        '(("a" "Appointment" entry (file+headline  (concat org-directory "/google-calendar.org") "Appointments")
               "* TODO %?\n:PROPERTIES:\n\n:END:\nDEADLINE: %^T \n %i\n")
          ("b" "Bookmark" entry (file+headline     (concat org-directory "/index.org") "Bookmarks")
               "* %^L %^g \n%T" :prepend t)
          ("j" "Journal" entry (file+datetree      (concat org-directory "/journal.org"))
               "* %?\nEntered on %U\n  %i\n  %a")
          ("n" "Note:" entry (file+headline         (concat org-directory "/notes.org") "Notes")
               "* Note %? %^g \n%i\n%T")
          ("t" "Todo Item" entry (file+headline    (concat org-directory "/todo.org") "Todo Items")
               "* TODO %?\n%T" :prepend t)))

#+END_SRC

** GitHub Markdown Export

[[https://github.com/larstvei/ox-gfm][ox-gfm on GitHub]]
[[https://melpa.org/#/ox-gfm][ox-gfm on MELPA]]

#+BEGIN_SRC emacs-lisp
  (use-package ox-gfm
    :ensure t)

  (eval-after-load "org"
    '(require 'ox-gfm nil t))
#+END_SRC

* All Other Packages
** Evil-Mode
[[https://github.com/emacs-evil/evil][Evil-mode on Github]]
#+BEGIN_SRC emacs-lisp
  (use-package evil
     :ensure t
     :init (setq evil-want-C-i-jump nil)
     :config
     (evil-mode 1))
#+END_SRC

This occur-mode hook allows me to hit =C-z= in a Magit buffer to turn on/off Evil bindings:
#+BEGIN_SRC emacs-lisp
  (add-hook 'occur-mode-hook
            (lambda ()
              (evil-add-hjkl-bindings occur-mode-map 'emacs
                (kbd "/")       'evil-search-forward
                (kbd "n")       'evil-search-next
                (kbd "N")       'evil-search-previous
                (kbd "C-d")     'evil-scroll-down
                (kbd "C-u")     'evil-scroll-up)))
#+END_SRC

** Which-Key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC

** Ivy
[[https://github.com/abo-abo/swiper][Repository for Ivy, Swiper & Counsel]]
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :config
    (ivy-mode 1))

  (use-package counsel
    :ensure t)
#+END_SRC

** Try
#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC

** Completion
*** Company-Mode
#+BEGIN_SRC emacs-lisp
  (use-package company               
    :ensure t
    :defer t
    :init (global-company-mode)
    :config
    (progn
      ;; Use Company for completion
      (bind-key [remap completion-at-point] #'company-complete company-mode-map)

      (setq company-tooltip-align-annotations t
            ;; Easy navigation to candidates with M-<n>
            ;; Does this also work in reverse with M-<p>?
            company-show-numbers t)
      (setq company-dabbrev-downcase nil))
    :diminish company-mode)

#+END_SRC

*** TODO Auto-Complete [disabled]
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :init
    (progn
      (ac-config-default)
      (global-auto-complete-mode t)))
#+END_SRC

** Projectile
[[https://github.com/bbatsov/projectile][Projectile on Github]]
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-global-mode)
    ;; use ivy for pattern matching and completion
    (setq projectile-completion-system 'ivy))
#+END_SRC

** Git
*** Magit
[[https://github.com/magit/magit][Magit on Github]]
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-c g" . magit-status)))
#+END_SRC

*** Git Gutter
[[https://github.com/syohex/emacs-git-gutter][Git Gutter's Github Repo]]
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :ensure t
    :init
    (global-git-gutter-mode +1))
#+END_SRC

* Miscellaneous
** Sunshine
[[https://github.com/aaronbieber/sunshine.el][Sunshine.el on Github]]
#+BEGIN_SRC emacs-lisp
  (use-package sunshine
    :ensure t
    :commands sunshine-forecast
    :config
    (defun echo-file-contents (file-path)
      "Return FILE-PATH's contents."
      (with-temp-buffer
        (insert-file-contents file-path)
        (buffer-string)))
    (setq sunshine-appid (echo-file-contents
                          (expand-file-name "sunshine.key" user-emacs-directory)))
    (setq sunshine-location "Denver, CO, USA")
    (setq sunshine-show-icons t))
#+END_SRC
* Todo
** TODO Install & Configure CIDER (file under LISPs -> Clojure)
** TODO Paredit [disabled]
Currently disabled as I'm trying [[https://github.com/shaunlebron/parinfer][parinfer]]

#+BEGIN_SRC emacs-lisp
  ;;(use-package paredit
  ;;  :ensure t
  ;;  :init
  ;;    (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
  ;;    (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  ;;    (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  ;;    (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  ;;    (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  ;;    (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  ;;    (add-hook 'scheme-mode-hook           #'enable-paredit-mode)

  ;;    ;; turn on paredit for clojure:
  ;;    (add-hook 'clojure-mode-hook #'paredit-mode))
#+END_SRC
** TODO indium [disabled]
#+BEGIN_QUOTE
Indium is a JavaScript development environment for Emacs.
#+END_QUOTE

[[https://indium.readthedocs.io/en/latest/][Docs]] [[https://github.com/NicolasPetton/Indium][GitHub]]

Indium suppoNodejs >= 8.x is required for Indium to work.
Indium is availabe on MELPA, MELPA Stable.

#+BEGIN_SRC emacs-lisp
  ;;(use-package indium
  ;;  :ensure t)

#+END_SRC

Useful functions:

1. _Start a process_: =M-x indium-run-node=
   Brings this up in the mini-buffer =Node command: node <point>=
   
   This is what the REPL brings up when you run vanilla node:
   
   #+BEGIN_SRC 
   Getting started:
   
   - Press <<return>> on links to open an inspector
   - Press <M-p> and <M-n> to navigate in the history
   - Use <M-x indium-scratch> to open a scratch buffer for JS evaluation
   - Press <C-h m> to see a list of available keybindings
   - Press <C-c C-o> to clear the output
   
   To disconnect from the JavaScript process, press <C-c C-q>.
   Doing this will also close all inspectors and debugger buffers
   connected to the process.
   #+END_SRC
   
   Necessary REPL command cheat sheet:
   
   | Command    | Behavior                            |
   |------------+-------------------------------------|
   | <<return>> | (On links) Open an inspector        |
   | <C-h m>    | See a list of available keybindings |
   | <C-c C-o>  | Clear input                         |
   | <C-c C-q>  | Disconnect from JS process          |

2. _Restart a process_: =M-x-restart-node=

3. _JavaScript Scratch Buffer_: =M-x indium-scratch=

   Use <M-x indium-scratch> to open a scratch buffer for JS evaluation

** DONE Put custom keybindings in Org-Mode into Custom Keybindings section
