
#+TITLE: My Emacs Config
#+AUTHOR: Andrew Jarrett
#+EMAIL: ahrjarrett@gmail.com


This is my Emacs configuration. =init.el= basically just installs =use-package=, and [[https://orgmode.org/worg/org-contrib/babel/][org-babel]] reads the source code blocks in this file and evaluates them, generating an elisp file called =readme.el=.

Rewritten top-to-bottom on February 15, 2018 to support GUI Emacs.

You're free to use whatever you'd like but do so at your own risk, etc etc.

* Utility functions

** =load-packages=
To install packages that don't play nice with =use-package=
#+BEGIN_SRC emacs-lisp
  (defun load-packages (package-list)
    (dolist (package package-list)
      (unless (package-installed-p package)
        (package-install package))))
#+END_SRC

** =echo-file-contents=
Read file contents
#+BEGIN_SRC emacs-lisp
  (defun echo-file-contents (file-path)
    "Return FILE-PATH's contents."
    (with-temp-buffer
      (insert-file-contents file-path)
      (buffer-string)))
#+END_SRC

Example use case, where =ssh.config= contains the phrase "Hello World":
#+BEGIN_SRC
  (split-string
   (echo-file-contents
    (expand-file-name "ssh.config" user-emacs-directory)))
;; ("Hello" "World")
#+END_SRC

** =insert-file-name=

Insert the full path file name into the current buffer. Useful for when using the current file name to create an easy template (see Easy Templates section).

Not being used in easy templates as of <2019-03-22 Fri>.

#+BEGIN_SRC emacs-lisp
(defun insert-file-name ()
  (insert (buffer-file-name (window-buffer (minibuffer-selected-window)))))
#+END_SRC


* Init

** Frame Defaults
#+BEGIN_SRC emacs-lisp
  ;; Set frame size on startup:
  (add-to-list 'default-frame-alist '(height . 56))
  (add-to-list 'default-frame-alist '(width . 177))
#+END_SRC

** More Better Defaults
Garbage collect at 20MG instead of 0.76MB to speed up some operations:
#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold 20000000)
#+END_SRC

** Interface Customization
*** Get Rid of GUI Stuff
#+BEGIN_SRC emacs-lisp
  ;; get rid of Emacs GUI shit
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+END_SRC
*** Typeface / Font
**** Default typeface

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "Fira Code Medium" ))
  (set-face-attribute 'default t :font "Fira Code Medium" )
#+END_SRC

**** Font Scaling
[[https://github.com/purcell/default-text-scale][default-text-scale on GitHub]]

This package allows me to adjust font-size in all buffers, including the mini-buffer (finally)

#+BEGIN_SRC emacs-lisp
  ;; font scaling
  (use-package default-text-scale
    :ensure t
    :bind ("C-M-=" . default-text-scale-increase)
    ("C-M--" . default-text-scale-decrease))
#+END_SRC

*** Theme

#+BEGIN_SRC emacs-lisp
  (use-package nord-theme
    :ensure t
    :defer t
    :init (load-theme 'nord-theme))

  (use-package zenburn-theme
    :ensure t
    :defer t)

  (use-package leuven-theme
    :ensure t
    :defer t
  )

  (use-package sublime-themes
    :ensure t
    :defer t)

  (use-package spacemacs-theme
    :ensure t
    :defer t
    :init (load-theme 'spacemacs-dark t))

#+END_SRC

*** Highlighting
#+BEGIN_SRC emacs-lisp
  ;; highlight line at point
  (global-hl-line-mode)
  ;; highlight opposite paren
  (show-paren-mode t)
#+END_SRC


** PATH

Consider moving this into [[file:init.el][init.el]]?

#+BEGIN_SRC emacs-lisp
  (setenv "PATH" (concat "/usr/local/smlnj/bin:" (getenv "PATH")))
  (setq exec-path (cons "/usr/local/smlnj/bin"  exec-path))

  ;; Snippet to load a directory, making al .el files available to require
  (defun load-directory (dir)
    (let ((load-it (lambda (f)
                    (load-file (concat (file-name-as-directory dir) f)))))

        (mapc load-it (directory-files dir nil "\\.el$"))))

   ;;add =vendor= to default directory
  (load-directory "~/.emacs.d/vendor/")

#+END_SRC

** Personal Variables
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Andrew Jarrett"
        user-email-address "ahrjarrett@gmail.com")
  ;; where to put emacs backup files
  (setq backup-directory-alist `(("." . "~/.saves")))
#+END_SRC

** Global Keybindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-s") 'swiper)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "<C-M-up>") 'enlarge-window-horizontally)
  (global-set-key (kbd "<C-M-down>") 'shrink-window-horizontally)
#+END_SRC

** Filesystem Navigation
*** Dired
#+BEGIN_SRC emacs-lisp
  ;; allow me to open a file/dir in dired w/o creating another buffer by hitting `a`
  (put 'dired-find-alternate-file 'disabled nil)
#+END_SRC


* Language & Environment Support
** LISPs
*** Emacs Lisp
#+BEGIN_SRC emacs-lisp
  ;; display “lambda” as “λ”
  ;; (global-prettify-symbols-mode 1)
#+END_SRC
**** Scratch
The [[https://github.com/narendraj9/quoted-scratch][quoted scratch]] package isn't on elpa/melpa, so you've gotta download and load it manually.

#+BEGIN_SRC emacs-lisp
  (use-package quoted-scratch
    :load-path "~/.emacs.d/quoted-scratch/"
    :demand t
    :config
    (progn
      (setq initial-scratch-message nil
            qs-show-auroville-quality nil)
      (add-hook 'emacs-startup-hook
                (lambda ()
                  (run-with-timer 1 nil 'qs-refresh-scratch-buffer)
                  (qs-refresh-quote-when-idle)))))
#+END_SRC

**** Macrostep
[[https://github.com/joddie/macrostep][Macrostep on Github]]
#+BEGIN_SRC emacs-lisp
  (use-package macrostep
    :ensure t
    :bind ("C-c e m" . macrostep-expand)
          ("C-c e c" . macrostep-collapse))
#+END_SRC
*** Parinfer
[[https://github.com/DogLooksGood/parinfer-mode][parinfer-mode on Github]]

Right now these are just the default settings, minus disabling lispy and paredit support.
#+BEGIN_SRC emacs-lisp
  (use-package parinfer
    :ensure t
    :bind
    (("C-," . parinfer-toggle-mode))
    :init
    (progn
      (setq parinfer-extensions
            '(defaults       ; should be included.
              pretty-parens  ; different paren styles for different modes.
              evil           ; If you use Evil.
              ;; lispy          ; If you use Lispy. With this extension, you should install Lispy and do not enable lispy-mode directly.
              ;; paredit        ; Introduce some paredit commands.
              smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
              smart-yank))   ; Yank behavior depend on mode.
      (add-hook 'clojure-mode-hook #'parinfer-mode)
      (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
      (add-hook 'common-lisp-mode-hook #'parinfer-mode)
      (add-hook 'scheme-mode-hook #'parinfer-mode)
      (add-hook 'lisp-mode-hook #'parinfer-mode)))
#+END_SRC
*** Clojure
[[https://github.com/clojure-emacs/clojure-mode][Clojure-Mode on Github]]
#+BEGIN_SRC emacs-lisp
(use-package clojure-mode
  :ensure t
  :config)
#+END_SRC

**** CIDER
#+BEGIN_SRC emacs-lisp
  (use-package cider
    :ensure t)
#+END_SRC

** Python

Use tabs, set tab width to 2, delete whitespace on save:
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook
            (lambda ()
              (setq-default indent-tabs-mode t)
              (setq-default tab-width 2)
              (setq-default py-indent-tabs-mode t)
              (add-to-list 'write-file-functions 'delete-trailing-whitespace)))
#+END_SRC

** ML

*** SML
[[https://elpa.gnu.org/packages/sml-mode.html][SML Mode on ELPA]]
#+BEGIN_SRC emacs-lisp
  (use-package sml-mode
    :ensure t
    :mode (("\\.sml\\'" . sml-mode)))
#+END_SRC

*** ReasonML
[[https://github.com/reasonml-editor/reason-mode][Reason Mode on GitHub]]
#+BEGIN_SRC emacs-lisp
  (use-package reason-mode
    :ensure t
    :init
    (add-hook 'reason-mode-hook (lambda ())
            (add-hook 'before-save-hook 'refmt-before-save))
    :mode ("\\.rei?'" . reason-mode))
#+END_SRC

*** OCaml
[[https://github.com/ocaml/tuareg][Tuareg Mode on GitHub]]

#+BEGIN_SRC emacs-lisp
  (use-package tuareg
    :mode ("\\.ml[ily]?$" . tuareg-mode)
    :ensure t)
#+End_SRC

**** DONE Add regex for types of file extensions in =:mode=

** Elm
#+BEGIN_SRC emacs-lisp
  (use-package elm-mode
    :mode ("\\.elm\\'" . elm-mode)
    :init (setq elm-format-on-save t))
#+END_SRC

** Web
*** JS2 Mode
[[https://elpa.gnu.org/packages/js2-mode.html][js2-mode on ELPA]]
#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :mode (("\\.js$" . js2-mode)) ;; makes sure we don't use for jsx files, too
    :interpreter ("node" . js2-mode)
    :config
    (setq-default js2-strict-missing-semi-warning nil)
    (setq-default js2-strict-trailing-comma-warning nil)
    (add-hook 'js2-mode-hook (lambda () (setq js2-basic-offset 2))))
#+END_SRC

*** React/JSX

[[https://github.com/felipeochoa/rjsx-mode][rjsx-mode on GitHub]]

#+BEGIN_SRC emacs-lisp
  (use-package rjsx-mode
    :ensure t)
#+END_SRC

*** Web Mode
[[http://web-mode.org/][web-mode docs]]

TODO really dig into react, make sure you can use arrow fn in component attribute.

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :mode (("\\.html\\'" . web-mode ))
    :mode (("\\.css\\'" . web-mode ))
    :init
    (progn
      (setq web-mode-markup-indent-offset 2)
      (setq web-mode-code-indent-offset 2)
      (setq web-mode-css-indent-offset 2)

      (setq web-mode-enable-auto-pairing t)
      (setq web-mode-enable-css-colorization t)))

#+END_SRC

#+RESULTS:

*** LESS
#+BEGIN_SRC emacs-lisp
  (use-package less-css-mode
    :ensure t
    ;:commands less-css-mode
    ;:config
    ;(use-package js2-mode)
    ;(use-package skewer-less)
    )

#+END_SRC

*** Prettier JS
DONE Once you get web-mode working, uncomment the line that adds a hook for prettier.

#+BEGIN_SRC emacs-lisp
;;(use-package prettier-js
;;  :ensure t
;;  :init
;;  (add-hook 'js2-mode-hook 'prettier-js-mode)
;;  (add-hook 'web-mode-hook 'prettier-js-mode)
;;  (setq prettier-js-args
;;        '("--trailing-comma" "all"
;;          "--single-quote" "true")))
#+END_SRC

** Markdown

[[https://jblevins.org/projects/markdown-mode/][Markdown Mode Docs]]
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))

#+END_SRC


* Eshell

** Prompt
[[https://www.emacswiki.org/emacs/EshellPrompt][Prompt Docs here]]

*** TODO Remove pathname /conditionally/, depending on width of buffer
*Here:* Remove pathname from prompt so I can actually read wtf I'm typing.

#+BEGIN_SRC emacs-lisp
  ;(setq eshell-prompt-function
  ;  (lambda ()
  ;    (concat (format-time-string "%Y-%m-%d %H:%M" (current-time))
  ;      (if (= (user-uid) 0) " # " " $ "))))
#+END_SRC



* Org-Mode
** Basic Org Config

The latest version of org-mode is manually installed in this directory under [[file:org-mode/][org-mode/]]. This is to provide more extensive language support for org-babel.

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis "  ▼")
  (setq org-startup-indented t)
  (setq org-table-convert-region-max-lines 3000)

  ;; turn on visual line mode automatically for .org files
  (add-hook 'org-mode-hook #'turn-on-visual-line-mode)

  (use-package htmlize
    :ensure t)

  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook #'org-bullets-mode))

  ;; Custom variables
  (custom-set-variables
   '(org-directory "~/Dropbox/orgfiles")
   '(org-default-notes-file (concat org-directory "/notes.org")))

  (setq org-agenda-files (list "~/Dropbox/org/ownlocal"))

  ;; org-mode agenda config from Home computer, changed for Work 08/01/18
  ;;(setq org-agenda-files (list (concat org-directory "/google-calendar.org")
  ;;                             (concat org-directory "/index.org"))))
#+END_SRC


** Org-Babel

*** Shell

#+BEGIN_SRC emacs-lisp

#+END_SRC

*** SML

[[https://github.com/swannodette/ob-sml][ob-sml on GitHub]]

#+BEGIN_QUOTE
Start a sml REPL with =M-x run-sml=. You should now be able to place your cursor in the code block and evaluate with =C-c C-c= and the contents of your code block will evaluate inline.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  ;(require 'ob-sml nil 'noerror)
#+END_SRC

*** Kick it all off

- =org-babel-do-load-languages= tells org-mode which languages it can evaluate in source code blocks. Add additional languages as =cons= cells, for example: =(ocaml . t )=.
- =ocp-indent= tells org-mode how to export OCaml results to other formats, for example html. For this to work, make sure you've installed it with:

  =$ opam install ocp-indent=

  And that you have the correct load-path. After it installs, opam will tell you where it is.

Note that =shell-command-switch= is commented out. That's because [[https://dev.realworldocaml.org/install.html%0A][according to the OCaml setup instructions]], this value needs to be changed when using utop (or maybe any shell in general?). Anyway, for now it works.

#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     ;;(sml . t)
     ;;(ocaml . t)
    ))

  ;; According to this
  ;;(setq shell-command-switch "-lc")


  ;; after installing ocp-indent:
  ;;(add-to-list 'load-path "/Users/aj/.opam/default/share/emacs/site-lisp"
  ;;             (require 'ocp-indent))
#+END_SRC


*** Exporting

**** Defaults

#+BEGIN_SRC emacs-lisp
  ;; removes annoying numbering from headers when exporting to HTML.
  ;; (the equivalent of putting #OPTIONS: num:nil  at the top of an org file)
  (setq org-export-with-section-numbers nil)

  ;; don't confirm evaluating source blocks on export:
  (setq org-confirm-babel-evaluate nil)
#+END_SRC

**** GitHub Markdown Export

[[https://github.com/larstvei/ox-gfm][ox-gfm on GitHub]]
[[https://melpa.org/#/ox-gfm][ox-gfm on MELPA]]

#+BEGIN_SRC emacs-lisp
  (use-package ox-gfm
    :ensure t)

  (eval-after-load "org"
    '(require 'ox-gfm nil t))
#+END_SRC



** Easy Templates

[[https://orgmode.org/manual/Easy-templates.html][Docs for Easy Templates]]

*** Org Mode Default Headers

Use =<P + TAB= to create a header like this:

#+BEGIN_SRC
#+TITLE:
#+AUTHOR: Andrew Jarrett
#+EMAIL: ahrjarrett@gmail.com
#+DATE: <2019-03-22 Fri>
#+END_SRC

Note that [[https://emacs.stackexchange.com/questions/44044/concat-in-org-easy-templates][this Stack Overflow question]] explains how we're able to use concat using the backtick and a comma in the list we pass to ~org-structure-template-alist~.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               `("P" ,(concat "#+TITLE: ?" "\n" "#+AUTHOR: " user-full-name "\n" "#+EMAIL:" user-email-address "\n" "#+DATE: " (format-time-string "%m/%d/%Y"))))

#+END_SRC


** Org Autocomplete
Disabled <2018-09-22 Sat> because of minor annoyances while writing reports or prose in org-mode.

#+BEGIN_SRC emacs-lisp
  (use-package org-ac
    :disabled
    :ensure t
    ;; why is this require in init necessary? is it?
    :init (progn
           (require 'org-ac)
           (org-ac/config-default)))
#+END_SRC

** Org Capture
#+BEGIN_SRC emacs-lisp
  ;; Go into Insert state after org-capture
  (add-hook 'org-capture-mode-hook 'evil-insert-state)

  ;; NOTE: %i allows you to mark a block of text anywhere in Emacs,
  ;; run Org-Capture, and it will drop that text into the capture.
  (setq org-capture-templates
        '(("a" "Appointment" entry (file+headline  (concat org-directory "/google-calendar.org") "Appointments")
               "* TODO %?\n:PROPERTIES:\n\n:END:\nDEADLINE: %^T \n %i\n")
          ("b" "Bookmark" entry (file+headline     (concat org-directory "/index.org") "Bookmarks")
               "* %^L %^g \n%T" :prepend t)
          ("j" "Journal" entry (file+datetree      (concat org-directory "/journal.org"))
               "* %?\nEntered on %U\n  %i\n  %a")
          ("n" "Note:" entry (file+headline         (concat org-directory "/notes.org") "Notes")
               "* Note %? %^g \n%i\n%T")
          ("t" "Todo Item" entry (file+headline    (concat org-directory "/todo.org") "Todo Items")
               "* TODO %?\n%T" :prepend t)))

#+END_SRC

** Org-Trello

*Note:* Apparently =org-trello= doesn't always play nice with =use-package=, so for now I'm installing manually. Will have to reinstall using =M-x package-install= on fresh installs of Emacs.

#+BEGIN_SRC emacs-lisp
  (load-packages '(org-trello))
  (require 'org-trello)
  (setq org-trello-files
    (directory-files "~/Dropbox/org/ownlocal/trello" ".*\.org$"))
#+END_SRC


* All Other Packages
** Evil-Mode
[[https://github.com/emacs-evil/evil][Evil-mode on Github]]
#+BEGIN_SRC emacs-lisp
  (use-package evil
     :ensure t
     :init (setq evil-want-C-i-jump nil)
     :config
     (evil-mode 1))
#+END_SRC

*** Evil Config

This occur-mode hook allows me to hit =C-z= in a Magit buffer to turn on/off Evil bindings:
#+BEGIN_SRC emacs-lisp
  (add-hook 'occur-mode-hook
      (lambda ()
        (evil-add-hjkl-bindings occur-mode-map 'emacs
          (kbd "/")       'evil-search-forward
          (kbd "n")       'evil-search-next
          (kbd "N")       'evil-search-previous
          (kbd "C-d")     'evil-scroll-down)))
          ;; This line conflicts with Emacs' built in modifier key
          ;;(kbd "C-u")     'evil-scroll-up

#+END_SRC

*** Evil-Surround
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))

#+END_SRC

*** Org-Evil

#+BEGIN_SRC emacs-lisp
  (use-package org-evil
    :disabled
    :ensure t)
#+END_SRC


** Which-Key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC

** TODO Helm
[[https://github.com/emacs-helm/helm][Helm on GitHub]]

Todo: Configure Helm & start doing cool stuff.

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :disabled
    :ensure t)
#+END_SRC


** TODO Ivy (disabled)
Currently disabled so I can try out helm for a bit.
<2018-09-23 Sun>

[[https://github.com/abo-abo/swiper][Repository for Ivy, Swiper & Counsel]]

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :init
    ;; This line is necessary to disable ligatures in Ivy
    ;; (otherwise it crashes)
    (add-hook 'ivy-mode
              (lambda ()
                (setq auto-composition-mode nil)))

    :config
    (ivy-mode 1)

    (use-package counsel
      :ensure t))
#+END_SRC

** Try
#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC

** Completion
*** Company-Mode
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :defer t
    :init (global-company-mode)
    :config
    (progn
      ;; Use Company for completion
      (bind-key [remap completion-at-point] #'company-complete company-mode-map)

      (setq company-tooltip-align-annotations t
            ;; Easy navigation to candidates with M-<n>
            ;; Does this also work in reverse with M-<p>?
            company-show-numbers t)
      (setq company-dabbrev-downcase nil))
    :diminish company-mode)

#+END_SRC

*** TODO Auto-Complete [disabled]
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :ensure t
    :init
    (progn
      (ac-config-default)
      (global-auto-complete-mode t)))
#+END_SRC

** Projectile
[[https://github.com/bbatsov/projectile][Projectile on Github]]
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (projectile-global-mode)
    (add-to-list 'projectile-globally-ignored-directories "node_modules")
    ;; use ivy for pattern matching and completion
    (setq projectile-completion-system 'ivy))
#+END_SRC

** Git
*** Magit
[[https://github.com/magit/magit][Magit on Github]]
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind (("C-c g" . magit-status)))
#+END_SRC

*** Git Gutter
[[https://github.com/syohex/emacs-git-gutter][Git Gutter's Github Repo]]
Disabled: <2018-09-22 Sat>

#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :disabled
    :ensure t
    :init
    (global-git-gutter-mode +1))
#+END_SRC

* Miscellaneous
** Sunshine

[[https://github.com/aaronbieber/sunshine.el][Sunshine.el on Github]]
#+BEGIN_SRC emacs-lisp
  (use-package sunshine
    :ensure t
    :commands sunshine-forecast
    :config
    (setq sunshine-appid (echo-file-contents
                          (expand-file-name "sunshine.key" user-emacs-directory)))
    (setq sunshine-location "Denver, CO, USA")
    (setq sunshine-show-icons t))
#+END_SRC

* Todo
** TODO Install & Configure CIDER (file under LISPs -> Clojure)
** DONE Paredit [disabled]
Currently disabled as I'm trying [[https://github.com/shaunlebron/parinfer][parinfer]]

#+BEGIN_SRC emacs-lisp
  (use-package paredit
    :disabled
    :ensure t
    :init
      (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
      (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
      (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
      (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
      (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
      (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
      (add-hook 'scheme-mode-hook           #'enable-paredit-mode)

      ;; turn on paredit for clojure:
      (add-hook 'clojure-mode-hook #'paredit-mode))
#+END_SRC
** DONE indium [disabled]
#+BEGIN_QUOTE
Indium is a JavaScript development environment for Emacs.
#+END_QUOTE

[[https://indium.thedocs.io/en/latest/][Docs]] [[https://github.com/NicolasPetton/Indium][GitHub]]

Indium suppoNodejs >= 8.x is required for Indium to work.
Indium is availabe on MELPA, MELPA Stable.

#+BEGIN_SRC emacs-lisp
  (use-package indium
    :disabled
    :ensure t)
#+END_SRC

Useful functions:

1. _Start a process_: =M-x indium-run-node=
   Brings this up in the mini-buffer =Node command: node <point>=

   This is what the REPL brings up when you run vanilla node:

   #+BEGIN_SRC
   Getting started:

   - Press <<return>> on links to open an inspector
   - Press <M-p> and <M-n> to navigate in the history
   - Use <M-x indium-scratch> to open a scratch buffer for JS evaluation
   - Press <C-h m> to see a list of available keybindings
   - Press <C-c C-o> to clear the output

   To disconnect from the JavaScript process, press <C-c C-q>.
   Doing this will also close all inspectors and debugger buffers
   connected to the process.
   #+END_SRC

   Necessary REPL command cheat sheet:

   | Command    | Behavior                            |
   |------------+-------------------------------------|
   | <<return>> | (On links) Open an inspector        |
   | <C-h m>    | See a list of available keybindings |
   | <C-c C-o>  | Clear input                         |
   | <C-c C-q>  | Disconnect from JS process          |

2. _Restart a process_: =M-x-restart-node=

3. _JavaScript Scratch Buffer_: =M-x indium-scratch=

   Use <M-x indium-scratch> to open a scratch buffer for JS evaluation

** DONE Put custom keybindings in Org-Mode into Custom Keybindings section
